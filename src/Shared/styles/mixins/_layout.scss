@import '../lib/vars/vars-from-map';
@import '../lib/vars/vars-declare.mixin';
@import '../mixins/responsive';
@import '../settings';

$-unit: settings('space-unit');
$root-space-gaps: vars-from-map('root-space-gaps', settings('space-gaps'));
$root-space-breakpoints: vars-from-map('root-space-breakpoints', settings('space-breakpoints'));

$container-base: space-container('base');
$container-compact: space-container('compact');
$container-small: space-container('small');
$container-medium: space-container('medium');
$container-large: space-container('large');

@mixin space-root {
  --root-space-unit: #{$-unit};

  @include vars-declare($root-space-gaps);
  @include vars-declare($root-space-breakpoints);
}

@mixin container {
  margin-left: map-get($container-base, 'gap') * $-unit * 1px;
  margin-right: map-get($container-base, 'gap') * $-unit * 1px;

  @include breakpoint-small {
    margin-left: map-get($container-small, 'gap') * $-unit * 1px;
    margin-right: map-get($container-small, 'gap') * $-unit * 1px;
  }

  @include breakpoint-medium {
    margin-left: map-get($container-medium, 'gap') * $-unit * 1px;
    margin-right: map-get($container-medium, 'gap') * $-unit * 1px;
  }

  @include breakpoint-large {
    max-width: map-get($container-medium, 'width') * $-unit * 1px;
    margin-left: auto;
    margin-right: auto;
  }
}

@mixin container-wide {
  margin-left: map-get($container-base, 'gap') * $-unit * 1px;
  margin-right: map-get($container-base, 'gap') * $-unit * 1px;

  @include breakpoint-small {
    margin-left: map-get($container-small, 'gap') * $-unit * 1px;
    margin-right: map-get($container-small, 'gap') * $-unit * 1px;
  }

  @include breakpoint-medium {
    margin-left: map-get($container-medium, 'gap') * $-unit * 1px;
    margin-right: map-get($container-medium, 'gap') * $-unit * 1px;
  }

  @include breakpoint-large {
    margin-left: map-get($container-large, 'gap') * $-unit * 1px;
    margin-right: map-get($container-large, 'gap') * $-unit * 1px;
  }
}

@mixin container-compact {
  margin-left: map-get($container-base, 'gap') * $-unit * 1px;
  margin-right: map-get($container-base, 'gap') * $-unit * 1px;

  @include breakpoint-small {
    margin-left: map-get($container-small, 'gap') * $-unit * 1px;
    margin-right: map-get($container-small, 'gap') * $-unit * 1px;
  }

  @include breakpoint-compact {
    max-width: map-get($container-compact, 'width') * $-unit * 1px;
    margin-left: auto;
    margin-right: auto;
  }
}

@mixin rhythm-v {
  margin-bottom: gap('large');

  @include breakpoint-small {
    margin-bottom: gap('huge');
  }

  @include breakpoint-compact {
    margin-bottom: gap('huge', 1.5);
  }
}

@mixin rhythm-v-compact {
  margin-bottom: gap('small');

  @include breakpoint-small {
    margin-bottom: gap('base');
  }

  @include breakpoint-compact {
    margin-bottom: gap('medium');
  }
}

@mixin spacing-h {
  margin-left: gap('base', -1);
  margin-right: gap('base', -1);
  padding-left: gap('base');
  padding-right: gap('base');

  @include breakpoint-small {
    margin-left: gap('medium', -1);
    margin-right: gap('medium', -1);
    padding-left: gap('medium');
    padding-right: gap('medium');
  }

  @include breakpoint-compact {
    margin-left: 0;
    margin-right: 0;
    padding-left: gap('large');
    padding-right: gap('large');
  }
}

@mixin spacing-h-negative {
  margin-left: gap('base', -1);
  margin-right: gap('base', -1);

  @include breakpoint-small {
    margin-left: gap('medium', -1);
    margin-right: gap('medium', -1);
  }

  @include breakpoint-compact {
    margin-left: 0;
    margin-right: 0;
  }
}

@mixin spacing-h-positive {
  padding-left: gap('base');
  padding-right: gap('base');

  @include breakpoint-small {
    padding-left: gap('medium');
    padding-right: gap('medium');
  }

  @include breakpoint-compact {
    padding-left: gap('large');
    padding-right: gap('large');
  }
}

@mixin spacing-v {
  padding-top: gap('base');
  padding-bottom: gap('base');

  @include breakpoint-small {
    padding-top: gap('medium');
    padding-bottom: gap('base', 1.5);
  }

  @include breakpoint-compact {
    padding-top: gap('large');
    padding-bottom: gap('large');
  }
}

@function gap($size, $scale: 1) {
  $gap: #{space-gap($size) * $scale}px;

  @return calc(var(--root-space-unit, #{$-unit}) * #{$gap});
}

@function unit($size, $scale: 1) {
  $gap: #{$size * $scale}px;

  @return calc(var(--root-space-unit, #{$-unit}) * #{$gap});
}
